{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shrey\\\\OneDrive\\\\Documents\\\\comic-app\\\\src\\\\Components\\\\App.jsx\";\nimport React from \"react\";\nimport Header from \"./Header.jsx\";\nimport Form from \"./Form.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const generateComic = async textInput => {\n    try {\n      const response = await fetch(\"http://localhost:5000/generate-comic\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          inputs: textInput\n        })\n      });\n      if (response.ok) {\n        const imageUrl = URL.createObjectURL(await response.blob());\n        // Handle the generated image URL, e.g., update state or display the image\n      } else {\n        console.error(\"Failed to generate comic:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error generating comic:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-layout\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      generateComic: generateComic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Header","Form","jsxDEV","_jsxDEV","App","generateComic","textInput","response","fetch","method","headers","body","JSON","stringify","inputs","ok","imageUrl","URL","createObjectURL","blob","console","error","statusText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shrey/OneDrive/Documents/comic-app/src/Components/App.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Header from \"./Header.jsx\";\r\nimport Form from \"./Form.jsx\";\r\n\r\nconst App = () => {\r\n  const generateComic = async (textInput) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/generate-comic\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ inputs: textInput }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const imageUrl = URL.createObjectURL(await response.blob());\r\n        // Handle the generated image URL, e.g., update state or display the image\r\n      } else {\r\n        console.error(\"Failed to generate comic:\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error generating comic:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-layout\">\r\n      <Header />\r\n      <Form generateComic={generateComic} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,IAAI,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAMC,aAAa,GAAG,MAAOC,SAAS,IAAK;IACzC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACnEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,MAAM,EAAER;QAAU,CAAC;MAC5C,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACQ,EAAE,EAAE;QACf,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAAC,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC,CAAC;QAC3D;MACF,CAAC,MAAM;QACLC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEd,QAAQ,CAACe,UAAU,CAAC;MACjE;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,oBACElB,OAAA;IAAKoB,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzBrB,OAAA,CAACH,MAAM;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVzB,OAAA,CAACF,IAAI;MAACI,aAAa,EAAEA;IAAc;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV,CAAC;AAACC,EAAA,GA5BIzB,GAAG;AA8BT,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}